<%= render "shared/step_bar", step: "schedule" %>
<div class="w-full max-w-2xl mx-auto bg-white p-6 rounded-md shadow-md">
  <h1 class="font-bold text-2xl mb-6">批量添加日程</h1>

  <% if @grouped_heats.empty? %>
    <div class="text-center py-12">
      <p class="text-gray-500 text-lg mb-4">没有可批量安排的项目</p>
      <p class="text-gray-400 text-sm mb-6">所有分组都已安排时间</p>
      <%= link_to "返回日程列表", competition_schedules_path(@competition), class: "btn btn-primary" %>
    </div>
  <% else %>
    <%= form_with url: bulk_create_competition_schedules_path(@competition), method: :post, class: "contents", id: "bulk-schedule-form" do |f| %>
      <div class="my-5">
        <%= label_tag "group_select", "选择比赛分组" %>
        <%= select_tag "group_select", 
                       options_for_select([["-- 请选择 --", ""]] + @grouped_heats.map { |group_key, heats| 
                         ["#{group_key[:grade_name]} - #{group_key[:event_name]} (#{group_key[:gender]}) - #{heats.count} 个分组", 
                          "#{group_key[:grade_id]}|#{group_key[:event_id]}|#{group_key[:gender]}|#{group_key[:avg_time]}",
                          { "data-heats-count" => heats.count, "data-avg-time" => group_key[:avg_time] }]
                       }),
                       { class: "select select-bordered w-full mt-2", required: true, id: "group-select", name: "group_select" } %>
        <%= hidden_field_tag :grade_id, "", id: "grade_id" %>
        <%= hidden_field_tag :event_id, "", id: "event_id" %>
        <%= hidden_field_tag :gender, "", id: "gender" %>
        <%= hidden_field_tag :avg_time, "", id: "avg_time" %>
      </div>

      <div id="heats-preview" class="my-5 hidden">
        <%= label_tag nil, "将要安排的分组" %>
        <div class="bg-base-200 p-3 rounded-lg max-h-48 overflow-y-auto mt-2">
          <% @grouped_heats.each do |group_key, heats| %>
            <% group_id = "#{group_key[:grade_id]}_#{group_key[:event_id]}_#{group_key[:gender]}" %>
            <div class="heats-list hidden" data-group-id="<%= group_id %>">
              <div class="flex flex-wrap gap-2">
                <% heats.each do |heat| %>
                  <span class="badge badge-outline badge-sm">
                    第<%= heat.heat_number %>组
                  </span>
                <% end %>
              </div>
            </div>
          <% end %>
        </div>
      </div>

      <div class="my-5">
        <%= label_tag "start_date", "开始日期" %>
        <%= date_field_tag :start_date, 
                          (@competition.start_date..@competition.end_date).include?(Date.today) ? Date.today : @competition.start_date,
                          min: @competition.start_date,
                          max: @competition.end_date,
                          class: "input block mt-2 w-full", 
                          required: true %>
      </div>

      <div class="my-5">
        <%= label_tag "start_time", "开始时间" %>
        <%= time_field_tag :start_time, "08:00", class: "input block mt-2 w-full", required: true %>
      </div>

      <div id="time-preview" class="my-5 hidden">
        <%= label_tag nil, "时间预览" %>
        <div class="bg-blue-50 text-blue-700 px-4 py-3 rounded-lg mt-2 text-sm">
          将安排 <strong id="preview-count">0</strong> 个分组，
          从 <strong id="preview-start"></strong> 开始，
          预计到 <strong id="preview-end"></strong> 结束
          <span class="text-xs opacity-75">(按项目平均用时 <span id="preview-avg-time"></span> 分钟自动计算)</span>
        </div>
      </div>

      <div class="my-5">
        <%= label_tag "venue", "场地" %>
        <%= text_field_tag :venue, nil, placeholder: "例如：田径场", class: "input block mt-2 w-full" %>
      </div>

      <div class="my-5">
        <%= label_tag "notes", "备注" %>
        <%= text_area_tag :notes, nil, placeholder: "其他说明信息", class: "textarea textarea-bordered block mt-2 w-full", rows: 3 %>
      </div>

      <div class="inline mt-6">
        <%= f.submit "批量添加", class: "btn btn-primary mr-2" %>
        <%= link_to "取消", competition_schedules_path(@competition), class: "btn" %>
      </div>
    <% end %>

    <script>
      function initBulkScheduleForm() {
        const groupSelect = document.getElementById('group-select');
        const heatsPreview = document.getElementById('heats-preview');
        const timePreview = document.getElementById('time-preview');
        const dateInput = document.querySelector('input[name="start_date"]');
        const timeInput = document.querySelector('input[name="start_time"]');
        const gradeIdInput = document.getElementById('grade_id');
        const eventIdInput = document.getElementById('event_id');
        const genderInput = document.getElementById('gender');
        const avgTimeInput = document.getElementById('avg_time');
        const form = document.getElementById('bulk-schedule-form');

        if (!groupSelect || !form) {
          console.log('Form elements not found, skipping initialization');
          return;
        }

        console.log('Initializing bulk schedule form');

        function updatePreview() {
          const selectedOption = groupSelect.options[groupSelect.selectedIndex];
          
          if (selectedOption.value) {
            // 解析选中的值: grade_id|event_id|gender|avg_time
            const [gradeId, eventId, gender, avgTime] = selectedOption.value.split('|');
            const heatsCount = parseInt(selectedOption.dataset.heatsCount);
            
            // 设置隐藏字段
            gradeIdInput.value = gradeId;
            eventIdInput.value = eventId;
            genderInput.value = gender;
            avgTimeInput.value = avgTime;
            
            console.log('Hidden fields set:', {
              grade_id: gradeIdInput.value,
              event_id: eventIdInput.value,
              gender: genderInput.value,
              avg_time: avgTimeInput.value
            });
            
            // 显示分组列表
            heatsPreview.classList.remove('hidden');
            document.querySelectorAll('.heats-list').forEach(list => {
              list.classList.add('hidden');
            });
            const groupId = `${gradeId}_${eventId}_${gender}`;
            const targetList = document.querySelector(`[data-group-id="${groupId}"]`);
            if (targetList) {
              targetList.classList.remove('hidden');
            }
            
            // 更新时间预览
            updateTimePreview(heatsCount, parseInt(avgTime));
          } else {
            heatsPreview.classList.add('hidden');
            timePreview.classList.add('hidden');
            gradeIdInput.value = '';
            eventIdInput.value = '';
            genderInput.value = '';
            avgTimeInput.value = '';
          }
        }

        function updateTimePreview(heatsCount, avgTime) {
          if (!dateInput.value || !timeInput.value || !heatsCount || !avgTime) {
            timePreview.classList.add('hidden');
            return;
          }

          const startDateTime = new Date(`${dateInput.value}T${timeInput.value}`);
          const totalMinutes = (heatsCount - 1) * avgTime + avgTime;
          const endDateTime = new Date(startDateTime.getTime() + totalMinutes * 60000);

          document.getElementById('preview-count').textContent = heatsCount;
          document.getElementById('preview-start').textContent = startDateTime.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });
          document.getElementById('preview-end').textContent = endDateTime.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });
          document.getElementById('preview-avg-time').textContent = avgTime;
          
          timePreview.classList.remove('hidden');
        }

        // 表单提交前验证
        form.addEventListener('submit', function(e) {
          if (!gradeIdInput.value || !eventIdInput.value || !genderInput.value || !avgTimeInput.value) {
            e.preventDefault();
            alert('请先选择比赛分组');
            return false;
          }
          console.log('Form submitting with:', {
            grade_id: gradeIdInput.value,
            event_id: eventIdInput.value,
            gender: genderInput.value,
            avg_time: avgTimeInput.value
          });
        });

        groupSelect.addEventListener('change', updatePreview);
        dateInput.addEventListener('change', () => {
          const selectedOption = groupSelect.options[groupSelect.selectedIndex];
          if (selectedOption.value) {
            const heatsCount = parseInt(selectedOption.dataset.heatsCount);
            const avgTime = parseInt(selectedOption.dataset.avgTime);
            updateTimePreview(heatsCount, avgTime);
          }
        });
        timeInput.addEventListener('change', () => {
          const selectedOption = groupSelect.options[groupSelect.selectedIndex];
          if (selectedOption.value) {
            const heatsCount = parseInt(selectedOption.dataset.heatsCount);
            const avgTime = parseInt(selectedOption.dataset.avgTime);
            updateTimePreview(heatsCount, avgTime);
          }
        });

        // 页面加载时，如果有选中的值，立即显示预览
        if (groupSelect.value) {
          updatePreview();
        }
      }

      // 支持 Turbo 和传统页面加载
      document.addEventListener('DOMContentLoaded', initBulkScheduleForm);
      document.addEventListener('turbo:load', initBulkScheduleForm);
      document.addEventListener('turbo:render', initBulkScheduleForm);
    </script>
  <% end %>
</div>
